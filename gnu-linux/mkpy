#!/bin/bash

#mkpy: creates an empty python executable, changes the permissions to make the file executable, and adds the shebang so that using an explicit interpreter is unnecessary
#Created on 9 July 2019

######CONSTANTS

#####FUNCTIONS

usage() {
	echo "mkpy: creates an empty python executable in the current directory by default, changes the permissions to make the file executable, and adds the shebang so that using an explicit interpreter is unnecessary"
	echo -e "\nUsage: mkpy [OPTION] [FILENAME]\n\n"
	echo -e "FILENAME: the name or full path of the file (without the .py suffix)\n"
	echo -e "OPTION is one of:\n"
	echo -e "\t-a|--args: include boilerplate code to check if script is being run as main and receive args\n"
}


cat_template_args() {
	echo -e "#!/usr/bin/env python

import argparse

##### MAIN

if __name__ == \"__main__\":
    parser = argparse.ArgumentParser()
    parser.add_argument(\"-a\", \"--arg1\", help=\"help field for this option\")
    args = parser.parse_args()

"
}	

cat_template_noargs() {
	echo -e "#!/usr/bin/env python

##### MAIN

"
}	

create_script() {
	touch $1
	chmod 755 $1
}

open_editor() {
  vim $1
}

clean_up() {
	exit 0
}

######MAIN

trap clean_up SIGINT SIGTERM SIGHUP

inc_args='n'

if [ "$1" == "--help" ]; then
    usage
    exit 0
fi

if [ -z "$1" ]; then
	echo "please specify the script's name"
	exit 1
fi

if [ "$1" == "-a" -o "$1" == "--args" ]; then
	inc_args='y'
	shift
fi

if [ -f "$1" -o -f "${1}.py" ]; then
		while [ "$REPLY" != "y" -a "$REPLY" != "Y" -a "$REPLY" != "n" -a "$REPLY" != "n" ]; do
			read -p "\"${1}.py\" already exists; replace? (y/n): "
		done
fi

if [ "$REPLY" == "n" -o "$REPLY" == "N" ]; then
	exit 0
fi

script="${1//.py/}.py"

create_script $script

if [ "$inc_args" == "y" ]; then
  cat_template_args > $script
else
  cat_template_noargs > $script
fi

open_editor $script

