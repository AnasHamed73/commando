#!/bin/bash
#cilogs

######CONSTANTS

### change this constant to the right path
# the root directory under which a new directory will be created that holds the files that are generated by the diff tool
WORK_DIR="${HOME}/builds"

SUPPORTED_BUILD_TYPES=("FS" "CO" "RS")

##### VARS

build_root=
build_dir=
wget_logs_dir=
html_page_path=

#####FUNCTIONS

usage() {
	echo "cilogs: download logs for a given build"
	echo -e "Usage: cilogs [BUILD_TYPE] [BUILD_NUM]"
	echo -e "\t[BUILD_TYPE]: the type of build. One of [${SUPPORTED_BUILD_TYPES[@]}] (case insensitive)"
	echo -e "\t[BUILD_NUM]: the build number. ex: 10245"
}

rmrf () {
  [ -e "$1" ] && rm -rf "$1"
}

clean_dir() {
  rmrf "$wget_logs_dir"
  rmrf "$html_page_path"
	for comp in $(ls "$build_dir" | grep ".*.tar.gz"); do
		rmrf "$build_dir"/"$comp"
	done
}

clean_up() {
  clean_dir
	exit 0
}

fail() {
	rmrf "$build_root"
	exit 1
}

######MAIN

trap clean_up SIGINT SIGTERM SIGHUP
case "$1" in
	"--help")
					usage 
					exit 0
					;;
esac

build_type="$1"
build_num="$2"

if [ -z "$build_type" ]; then
	echo "Please specify build type."
	usage
	exit 1
fi

build_type=${build_type^^}
if [[ ! "${SUPPORTED_BUILD_TYPES[*]}" =~ "$build_type" ]]; then
	echo "Build type must be one of [${SUPPORTED_BUILD_TYPES[@]}] (case insensitive)."
	exit 1
fi

if [ -z "$build_num" ]; then
	echo "Please specify build number."
	usage
	exit 1
fi


build_root="${WORK_DIR}/${build_type}-${build_num}"
build_dir="${build_root}/logs"
wget_logs_dir="$build_dir"/wget_logs
html_page_path="$build_dir/build_page.html"

mkdir -p "$build_dir"
mkdir -p "$wget_logs_dir"

page_url="https://cas-jenkins-p1.pontus.lab.emc.com/job/${build_type}_-_Build_and_Metal_Testing_Pipeline/${build_num}/artifact/build"
echo "fetching page $page_url"
wget -q "$page_url" -O "$html_page_path" || { echo "build not found"; fail; }

log_files=$(grep -Eo "[ABC][DEO][0-9]+-[0-9]+.[0-9]+.[0-9]+.[0-9]+-[a-zA-Z-]+-console.log(.tar)?.gz" "$html_page_path" | uniq)

echo "downloading log files"
for log_file in $log_files; do
	wget -b "$page_url"/"$log_file" -O "$build_dir"/"$log_file" -o "$wget_logs_dir"/"$log_file".log &>/dev/null
done

down_pending=true
while [ "$down_pending" = true ]; do
  down_pending=false
  for down_log in $(ls "$wget_logs_dir"); do
		file_name=$(echo "$down_log" | sed s/\.log$//g)
		if grep -q "${file_name}.* saved" "$wget_logs_dir"/"$down_log"; then
			echo "downloaded $file_name"
			rm "$wget_logs_dir"/"$down_log"
		else
		  down_pending=true
		fi
	done
done

cd "$build_dir"
if [ -z "$(ls | grep -E "\.log.+")" ]; then
	echo "no logs found"
  clean_up
fi

echo "decompressing compressed log files"
for comp_log in $(ls | grep -E "\.log.+"); do
	file_name=$(echo $comp_log | sed 's/\.log.*//')
	if grep -qE "*.tar.gz$" <<< "$comp_log"; then
	  tar -zxvf "$comp_log" 1>/dev/null
	else
		gzip -fd "$comp_log" 1>/dev/null
	fi
	log_file=$(ls | grep -E "*\.log$")
	mv "$log_file" "${file_name}-log.txt"
done

echo "log files saved in $build_dir"

clean_up
