#!/bin/bash
#smrp

######CONSTANTS

### change this constant to the right path
# the root directory under which a new directory will be created that holds the files that are generated by the diff tool
WORK_DIR="${HOME}/builds"

TEAM="carma"
SUPPORTED_BUILD_TYPES=("FS" "CO" "RS")
SUPPORTED_TEST_MODULES=("ViaAccessAPI" "ViaAccessUI")
# set this to true to see detailed logging
DEBUG=false

LSB="lastSuccessfulBuild"
LCB="lastCompletedBuild"
LB="lastdBuild"

##### VARS 

build_dir=

#####FUNCTIONS

usage() {
  echo "smrp: (description)"
  echo -e "\nUsage: smrp"
}

clean_up() {
  [ -n "$build_dir" ] && [ -e "$build_dir" ] && rm -rf "$build_dir"
  exit 0
}

dbg() {
  [ $DEBUG = true ] && echo $*
}

fail() {
  clean_up
  exit 1
}

######MAIN

trap clean_up SIGINT SIGTERM SIGHUP

case "$1" in
  "--help")
    usage 
    exit 0
    ;;
  "--verbose")
    DEBUG=true 
    shift
    ;;
esac


build_type="$1"
build_num="$2"

if [ -z "$build_type" ]; then
  echo "Please specify build type."
  usage
  exit 1
fi

build_type=${build_type^^}
if [[ ! "${SUPPORTED_BUILD_TYPES[*]}" =~ "$build_type" ]]; then
  echo "Build type must be one of [${SUPPORTED_BUILD_TYPES[@]}] (case insensitive)."
  exit 1
fi

if [ -z "$build_num" ]; then
  echo "Please specify build number."
  usage
  exit 1
fi

if [ "$build_num" = "c" ]; then
  build_num="$LCB"
fi

build_root="${WORK_DIR}/${build_type}-${build_num}"
build_dir="${build_root}/test_reports"
build_url=https://cas-jenkins-p1.pontus.lab.emc.com/job/${build_type}_-_Build_and_Metal_Testing_Pipeline/${build_num}

#mkdir -p "$build_dir"

declare -A stanza_to_test
for test_module in ${SUPPORTED_TEST_MODULES[*]}; do
  stanza_list_url="$build_url/artifact/${test_module}/test-output/Reports/"
  stanza_list="/tmp/${build_type}_${build_num}_stanza_reports.html"
  
  dbg "fetching page $stanza_list_url"
  wget -O "$stanza_list" "$stanza_list_url" &> /dev/null \
    || { echo "$build_type-$build_num: no artifacts for $test_module"; continue; }
  stanza_names=$(sed 's/<\/td/\n/g' "$stanza_list" \
    | grep -oi ">*${TEAM}.*.html</" \
    | sed -e 's/.*>//g' -e 's/<.*//g' -e 's/\.html//g' \
    | uniq)

  if [ "$build_num" = "$LCB" ]; then
    build_num=$(grep -Eo "Artifacts of .* #[0-9]+" "$stanza_list" | cut -d'#' -f2)
    build_root="${WORK_DIR}/${build_type}-${build_num}"
    build_dir="${build_root}/test_reports"
    build_url=https://cas-jenkins-p1.pontus.lab.emc.com/job/${build_type}_-_Build_and_Metal_Testing_Pipeline/${build_num}
    
    stanza_list_url="$build_url/artifact/${test_module}/test-output/Reports/"
    stanza_list="${build_dir}/stanza_reports.html"
    dbg "build num is $build_num"
  fi

  mkdir -p "$build_dir"
  
  for stanza_name in $stanza_names; do
    dbg "processing stanza: $stanza_name"
    stanza_report="${build_dir}/${stanza_name}"
    stanza_url="$stanza_list_url"/"$stanza_name".html
    dbg "fetching page $stanza_url"
    wget -O "$stanza_report" "$stanza_url" &>/dev/null || echo "failed to download report for $stanza_name" 
  
    # test results
    test_res=$(grep -n '<tr class="tag-test-status" status="fail">' "$stanza_report")
    
    # test names
    test_names=$(grep -n '<a href="#" class="linked"' "$stanza_report")
    concatenated="$test_names"$'\n'"$test_res"
  
    IFS=$'\n' test_names_merged=$(sort <<< $concatenated)
    i=0
    is_failed=
    IFS=$'\n'
    for item in $test_names_merged; do 
      if [ "$is_failed" = true ]; then
        test_name_clean=$(sed \
	  -e 's/[[:digit:]]\+://g' \
	  -e 's/\/.*>//g' \
	  -e 's/<a.*>//g' \
	  -e 's/<.*//g' \
	  <<< "$item")
        stanza_to_test["$stanza_name"]="${stanza_to_test["$stanza_name"]}:$test_name_clean"
        dbg "*** $test_name_clean is a failed test"
      fi
      if grep -q "\"fail\"" <<< ${item}; then
        is_failed=true
      else
        is_failed=false
      fi
      i=$((i+1))
    done
  done
done

if [ ! -z "${stanza_to_test[*]}" ]; then
  echo "[${build_type}-${build_num}]($build_url)"
  for stanza in $(echo ${!stanza_to_test[@]} | tr ' ' $'\n' | sort); do
    #echo "* [${stanza}](${build_url}/${stanza})"
    for ftest in $(tr ':' $'\n' <<< ${stanza_to_test[$stanza]}); do
      echo "* [$ftest](${build_url}/${stanza})"
    done
  done
else
  echo "${build_type}-${build_num}: no failures"
fi
