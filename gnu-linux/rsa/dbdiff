#!/bin/bash
# dbdiff: download build db exports and then perform a local diff

###### CONSTANTS

### change these 5 constants to the right paths if needed
# the root directory under which a new directory will be created that holds the files that are generated by the diff tool
GIT_ROOT_DIR="${HOME}/git"
# the path of the directory that holds the diff tool
DIFF_CMD_DIR="${GIT_ROOT_DIR}/active-active/components/activeactive-tools"
PLANITIA_REPO_PATH="${GIT_ROOT_DIR}/Planitia"
TANGO_REPO_PATH="${GIT_ROOT_DIR}/tango"

DIFF_CMD_NAME=aa-compare.sh
SUPPORTED_BUILD_TYPES=("FS" "CO" "RS")

##### VARS

work_dir="${HOME}/builds"
del_tmp=true
build_root=
build_dir=
wget_logs_dir=
html_page_path=

##### FUNCTIONS

usage() {
  echo "dbdiff: download build db exports and then perform a local diff"
  echo -e "\nUsage: dbdiff [OPTIONS] <BUILD_TYPE> <BUILD_NUM>"
  echo -e "\t[-b|--build]: (optional) build Planitia and tango before running the diff"
  echo -e "\t[-w|--west]: (optional) initiate the diff with west as the primary (enabled by default)"
  echo -e "\t[-e|--east]: (optional) initiate the diff with east as the primary (disabled by default)"
  echo -e "\t[--no-delete]: (optional) do not delete the intermediate files used to create the diff files"
  echo -e "\t<BUILD_TYPE>: (required) the type of build. One of [${SUPPORTED_BUILD_TYPES[@]}] (case insensitive)"
  echo -e "\t<BUILD_NUM>: (required) the build number. ex: 10245"
  echo -e "\nExample: dbdiff -b co 5785\n\t(runs a diff on the artifacts produced by cloud only run 5785 after first building Planitia and tango locally)"
  echo -e "Example: dbdiff fs 10319\n\t(runs a diff on the artifacts produced by full stack run 10319)"
}

rmrf () {
  [ -e "$1" ] && rm -rf "$1"
}

build_repo() {
  if [ ! -e "$1" ]; then
    echo "path does not exist: $1"
    fail
  fi
  cd "$1"
  aiom --clean --notest || { echo "failed to build $1"; fail; }
}

clean_dir() {
  rmrf "$wget_logs_dir"
  rmrf "$html_page_path"
  if [ "$del_tmp" = true ]; then
    [ -e "$build_dir" ] && rm -rf "$build_dir"/*.tar.gz
  fi
}

clean_up() {
  clean_dir
  exit 0
}

fail() {
  rmrf "$build_dir"
  exit 1
}

###### MAIN

trap clean_up SIGINT SIGTERM SIGHUP

while grep -q "^-" <<< $1; do
  case "$1" in
    "--help")
      usage 
      exit 0
      ;;
    "--build"|"-b")
      run_build=true
      shift
      ;;
    "--east"|"-e")
      east_primary=true
      shift
      ;;
    "--west"|"-w")
      east_primary=false
      shift
      ;;
    "-d")
      shift
      work_dir="$(readlink -f $1)"
      shift
      ;;
    "--no-delete")
      del_tmp=false
      shift
      ;;
    -*)
      echo "unrecognized option: $1"
      usage
      exit 1
  esac
done

if [ ! -e "$DIFF_CMD_DIR" ]; then
  echo "tango path is incorrect: path \"$DIFF_CMD_DIR\" does not exist. Please modify the path in CONSTANTS section of this script"
  exit 1
fi

build_type="$1"
build_num="$2"

if [ -z "$build_type" ]; then
  echo "Please specify build type."
  usage
  exit 1
fi

build_type=${build_type^^}
if [[ ! "${SUPPORTED_BUILD_TYPES[*]}" =~ "$build_type" ]]; then
  echo "Build type must be one of [${SUPPORTED_BUILD_TYPES[@]}] (case insensitive)."
  exit 1
fi

if [ -z "$build_num" ]; then
  echo "Please specify build number."
  usage
  exit 1
fi

if [ "$run_build" = true ]; then
  build_repo "$PLANITIA_REPO_PATH"
  build_repo "$TANGO_REPO_PATH"
fi

build_root="${work_dir}/${build_type}-${build_num}"
build_dir="${build_root}/diff"
wget_logs_dir="$build_dir"/wget_logs
html_page_path="$build_dir/build_page.html"
mkdir -p "$build_dir"
mkdir -p "$wget_logs_dir"

page_url="https://cas-jenkins-p1.pontus.lab.emc.com/job/${build_type}_-_Build_and_Metal_Testing_Pipeline/${build_num}/artifact/build"
echo "fetching page $page_url"
wget -q "$page_url" -O "$html_page_path" || { echo "build not found"; fail; }

sort_opts="-r"
if [ "$east_primary" = true ]; then
  sort_opts=
fi
exports=$(grep -Eo "[BC][EO][0-9]+-[0-9]+.[0-9]+.[0-9]+.[0-9]+-dbExportTables.tar.gz" "$html_page_path" | uniq | sort $sort_opts)
if [ -z "$exports" ]; then
  echo "no db exports found for $build_type #$build_num"
  fail
fi

declare -A node_type_ctr
declare -A renamed
echo "downloading db export files"
for export in $exports; do
  export_node_type=${export:0:2}
  if [ -z ${node_type_ctr[$export_node_type]} ]; then
    node_type_ctr[$export_node_type]=0
  fi
  export_suffix="$(echo "$export" | cut -c 4-)"
  export_renamed="${export_node_type}${node_type_ctr[$export_node_type]}${export_suffix}"

  wget -b "$page_url"/"$export" -O "$build_dir"/"$export_renamed" -o "$wget_logs_dir"/"$export".log &>/dev/null
  renamed[$export]="$export_renamed"

  node_type_ctr[$export_node_type]="$(( ${node_type_ctr[$export_node_type]} + 1 ))"
done

down_pending=true
while [ "$down_pending" = true ]; do
  down_pending=false
  for down_log in $(ls "$wget_logs_dir"); do
    file_name=$(echo "$down_log" | sed s/\.log$//g)
    if grep -q "${renamed[$file_name]}.* saved" "$wget_logs_dir"/"$down_log"; then
      echo "downloaded $file_name -> ${renamed[$file_name]}"
      rm "$wget_logs_dir"/"$down_log"
    else
      down_pending=true
    fi
  done
done

echo "initiating diff"
cd "$DIFF_CMD_DIR"
./"$DIFF_CMD_NAME" "$build_dir"
cd "$build_dir"

for diff_file in "be-diffs.txt" "co-diffs.txt"; do
  [ ! -e "$diff_file" ] && { echo "$diff_file not found"; continue; }
  echo -e "\n*** $diff_file ***\n"
  cat "$build_dir"/"$diff_file"
done

clean_up

