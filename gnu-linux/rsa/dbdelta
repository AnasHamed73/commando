#!/bin/bash
# dbdelta: download build db exports and then perform a comparison (delta) of the query execution timestamps

###### CONSTANTS

### change these constants to the right paths if needed
# the root directory under which a new directory will be created that holds the files that are generated by the delta tool
GIT_ROOT_DIR="${HOME}/git"
SUPPORTED_BUILD_TYPES=("FS" "CO" "RS")
NODE_TYPES=("BE" "CO")
AA_MAPPING_FILE_ARXPATH="./log/aa_entity_mapping.csv"
DELTA_GEN_SCRIPT_PATH="$(dirname $0)/_gen_deltas.py"

if [ ! -f "$DELTA_GEN_SCRIPT_PATH" ]; then
  echo "cannot find delta generating script $DELTA_GEN_SCRIPT_PATH"
  exit 1
fi

##### VARS

work_dir="${HOME}/builds"
build_root=
build_dir=
wget_logs_dir=
html_page_path=
plot_args=
extract_dir=

##### FUNCTIONS

usage() {
  echo -e "\ndbdelta: download build db exports and then perform a"\
    "comparison (delta) of the query execution timestamps"
  echo -e "\nUsage: dbdelta [OPTIONS] <BUILD_TYPE> <BUILD_NUM>"
  echo -e "  <BUILD_TYPE>: (required) the type of build. One of"\
    "[${SUPPORTED_BUILD_TYPES[@]}] (case insensitive)"
  echo -e "  <BUILD_NUM>: (required) the build number. e.g.: 10245"
  echo -e "  [OPTIONS]:"
  echo -e "    --show-plot|-p: plot the resulting deltas onto a graph"
  echo -e "    --save-plot|-s: only save the plots that would be"\
    "generated using the --show-plot option; do not display them"
  echo -e "    -d DIR: output files to specified directory"
  echo -e "    --help: display description and usage"
}

rmrf () {
  [ -e "$1" ] && rm -rf "$1"
}

clean_dir() {
  rmrf "$wget_logs_dir"
  rmrf "$html_page_path"
  rmrf "$extract_dir"
}

clean_up() {
  clean_dir
  exit 0
}

fail() {
  rmrf "$build_dir"
  [ -n "$(find "$build_root" -empty -type d)" ] && rmrf "$build_root"
  exit 1
}

ensure_plot_lib() {
  python3 -c 'import matplotlib' &>/dev/null; ok=$?
  if [ "$ok" = 1 ]; then
    echo -e "The plot options need the python library 'matplotlib', which"\
      "isn't installed yet.\nYou can install it using the command"\
      "'pip3 install matplotlib'\nNote: make sure you are disconnected from"\
      "the GlobalProtect VPN for the install."
    exit 1
  fi
}

###### MAIN

trap clean_up SIGINT SIGTERM SIGHUP

while grep -q "^-" <<< "$1"; do
  case "$1" in
    "--help")
      usage 
      exit 0
      ;;
    "--show-plot"|"-p")
      ensure_plot_lib
      plot_args="$plot_args -p"
      shift
      ;;
    "--save-plot"|"-s")
      ensure_plot_lib
      plot_args="$plot_args -s"
      shift
      ;;
    "-d")
      shift
      work_dir="$1"
      shift
      ;;
    -*)
      echo "unrecognized option: $1"
      usage
      exit 1
  esac
done

build_type="$1"
build_num="$2"

if [ -z "$build_type" ]; then
  echo "Please specify build type."
  usage
  exit 1
fi

build_type=${build_type^^}
if [[ ! "${SUPPORTED_BUILD_TYPES[*]}" =~ "$build_type" ]]; then
  echo "Build type must be one of [${SUPPORTED_BUILD_TYPES[@]}] (case insensitive)."
  exit 1
fi

if [ -z "$build_num" ]; then
  echo "Please specify build number."
  usage
  exit 1
fi

build_root="${work_dir}/${build_type}-${build_num}"
build_dir="${build_root}/delta"
wget_logs_dir="$build_dir"/wget_logs
html_page_path="$build_dir/build_page.html"
mkdir -p "$build_dir"
[ -n "$build_dir" ] && rm -rf "$build_dir"/*
mkdir -p "$wget_logs_dir"

page_url="https://cas-jenkins-p1.pontus.lab.emc.com/job/${build_type}_-_Build_and_Metal_Testing_Pipeline/${build_num}/artifact/build"
echo "fetching page $page_url"
wget -q "$page_url" -O "$html_page_path" || { echo "build not found"; fail; }

exports=$(grep -Eo "[BC][EO][03]+-[0-9]+.[0-9]+.[0-9]+.[0-9]+-dbExportTables.tar.gz" "$html_page_path" | uniq | sort)
if [ -z "$exports" ]; then
  echo "no db exports found for $build_type #$build_num"
  fail
fi

declare -A node_type_ctr
declare -A renamed
echo "downloading db export files"
for export in $exports; do
  export_node_type=${export:0:2}
  if [ -z ${node_type_ctr[$export_node_type]} ]; then
    node_type_ctr[$export_node_type]=0
  fi
  export_suffix="$(echo "$export" | cut -c 4-)"
  export_renamed="${export_node_type}${node_type_ctr[$export_node_type]}${export_suffix}"

  wget -b "$page_url"/"$export" -O "$build_dir"/"$export_renamed" -o "$wget_logs_dir"/"$export".log &>/dev/null
  renamed[$export]="$export_renamed"

  node_type_ctr[$export_node_type]="$(( ${node_type_ctr[$export_node_type]} + 1 ))"
done

down_pending=true
while [ "$down_pending" = true ]; do
  down_pending=false
  for down_log in $(ls "$wget_logs_dir"); do
    file_name=$(echo "$down_log" | sed s/\.log$//g)
    if grep -q "${renamed[$file_name]}.* saved" "$wget_logs_dir"/"$down_log"; then
      echo "downloaded $file_name -> ${renamed[$file_name]}"
      rm "$wget_logs_dir"/"$down_log"
    else
      down_pending=true
    fi
  done
done

cd "$build_dir"
extract_dir="$build_dir/_extracted"
for tar_file in $(ls *.tar.gz); do
  ext="${extract_dir}/${tar_file//.tar.gz/}"
  mkdir -p "$ext" \
    && tar -zxf "$tar_file" -C "$ext" "$AA_MAPPING_FILE_ARXPATH" \
    && echo "extracted $tar_file"
  rm "$tar_file"
done

for pref in ${NODE_TYPES[@]}; do
  csv_files=$(find "$extract_dir" -wholename "$extract_dir/${pref}*.csv" | sort)
  if [ -z "$csv_files" ]; then
    echo "ERROR: no $pref csv files were found, check build artifacts"
    continue
  fi
  delta_file="$build_dir"/${build_type}-${build_num}_${pref}_delta.csv
  echo "generating $pref deltas"
  "$DELTA_GEN_SCRIPT_PATH" $plot_args $csv_files "$delta_file"
  delta_files="${delta_files}:$delta_file"
done

echo -ne "\ngenerated delta files:"
echo -e "${delta_files//:/\\n}"

clean_up

