#!/bin/bash
#runproj: run the backend services required to launch the proj site, then run the site
#Created on 23 July 2020

###### CONSTANTS

declare -A SVC_ENDPOINTS=(
  [S1]='localhost:2001'
  [S2]='localhost:2002'
  [S3]='localhost:2003'
  [S4]='localhost:2004'
)

PROJ_BASE_DIR="${HOME}/src"
SITE_DIR="site"
SITE_URL='localhost:4200'
LOG_DIR="/tmp"

NODE_MAJOR_VERSION="14"
# names of the backend services (i.e. databases like MongoDB) as identified by systemctl
BACKEND_SVCS=("mongod" "redis")

# run the site using the dev configuration
USE_DEV_CONFIG="false"

###### NO NEED TO MODIFY ANYTHING BEYOND THIS POINT ######

PROMPT_STR="> "
LOG_SUFFIX="service_log_$(date '+%F-%T')"
TMP_LOG_FILE="${LOG_DIR}/service_watcher"
MENU_WIDTH="50"

declare -A SVC_NAMES=()

for service in "${!SVC_ENDPOINTS[@]}"; do
  service_url="${SVC_ENDPOINTS[$service]}"
  SVC_NAMES[$service_url]=$service
done
SVC_NAMES[$SITE_URL]="${SITE_DIR}"


SITE_DIR=$(basename "${SITE_DIR}")

##### FUNCTIONS

usage() {
	echo "runproj: run the backend services required to launch the proj site, then run the site"
	echo -e "\nUsage: runproj [-d]"
	echo -e "\t -d: start the site with the dev configuration (this option is disabled by default)"
}

err() { >&2 echo -ne "\033[0;31m${@}\033[0m"; }
warn() { echo -ne "\033[1;33m${@}\033[0m"; }
info() { echo -ne "\033[1;36m${@}\033[0m"; }
success() { echo -ne "\033[0;32m${@}\033[0m"; }

get_svc_pid() {
  lsof -t -i :$(cut -f2 -d: <<< "${1}")
}

get_svc_log() {
	echo -n "${LOG_DIR}/${1}_${LOG_SUFFIX}"
}

get_svc_log_by_num() {
	svc="$(get_svc_name_by_num $1)"
	echo -n "$(get_svc_log $svc)"
}

rm_log() {
	log="$(get_svc_log $1)"
	[ -e $log ] && rm $log
}

get_svc_name_by_num() {
	i=1
  for service in "${!SVC_ENDPOINTS[@]}"; do
		[ "${i}" -eq "$1" ] && echo -n "${service}" && return
		i=$((i+1))
	done
	echo -n "${SITE_DIR}"
}

get_svc_url_by_num() {
	target=$(get_svc_name_by_num $1)
	echo -n "${SVC_ENDPOINTS[$target]}"
}

kill_svc_by_num() {
	target=$(get_svc_name_by_num $1)
	[ "$target" = "${SITE_DIR}" ] && svc_url="${SITE_URL}" || svc_url="${SVC_ENDPOINTS[$target]}"
	if [ "$(svc_process_running ${svc_url}; echo $?)" -ne "0" ]; then
		warn "$target PROCESS IS ALREADY DOWN" 
		return 0
	fi
	kill_svc_process "$svc_url"
	info "${target} PROCESS KILLED\n"
}

restart_all() {
	info "RESTARTING SERVICES & SITE\n"
	kill_all && echo && run_all || exit "$?"
}

restart_site() {
  kill_svc_process "${SITE_URL}" &>/dev/null
	rm_log "${SITE_DIR}"
  run_site
}

restart_svc() {
	target=$(get_svc_name_by_num $1)
	info "RESTARTING ${target}" && lps
	if [ "${target}" = "${SITE_DIR}" ]; then
    restart_site && await_site
	else
	  run_svc "${target}" &>/dev/null
	  success "SUCCESS\n"
	fi
}

kill_svc_process() {
  kill $(get_svc_pid ${1}) &>/dev/null
}

svc_process_running() {
	[ -z "$(get_svc_pid $1)" ] && return 1 || return 0
}

kill_node() {
	service="$1"
	svc_url="${2}"
	svc_path="${PROJ_BASE_DIR}/${service}"
	cd "${svc_path}"
	info "STOPPING ${service}\n"
	npm stop &>/dev/null || kill $(get_svc_pid ${svc_url}) &>/dev/null
	rm_log "$service"
}

kill_old() {
	service="$1"
	service_url="${SVC_ENDPOINTS[$service]}"
  svc_process_running "$service_url"; up=$?
	if [ "$up" -eq "0" ]; then
    warn "ALREADY RUNNNING; RESTARTING" && lps 
		kill_svc_process "${service_url}"
	fi
  rm_log "$service"
}

kill_all() {
	echo 
  for service in "${!SVC_ENDPOINTS[@]}"; do
		kill_node "${service}" "${SVC_ENDPOINTS[$service]}"
	done
	kill_node "${SITE_DIR}" "${SITE_URL}"
	[ -e "$TMP_LOG_FILE" ] && rm "$TMP_LOG_FILE"
}

kill_all_and_exit() {
	kill_all
	exit "$?"
}

endpoint_up() {
	health_status="$(curl -s -o /dev/null -w %{http_code} ${1}/health)"
	if [ "$health_status" -eq "000" -o "$health_status" -eq "404" ]; then
	  get_status=$(curl -s -o /dev/null -w %{http_code} ${1})
	  if [ "$get_status" -eq "000" -o "$get_status" -eq "404" ]; then
		  return 1
		else
			return 0
		fi
	else
		return 0
	fi
}

start_node() {
	service="$1"; shift
	logs="$*"
  service_path="${PROJ_BASE_DIR}/${service}"
  cd $service_path 
	( npm run start &> >(tee -a $(echo $logs)) &) &>/dev/null
}

run_svc() {
	service="$1"
	service_log="$(get_svc_log ${service})"
  service_url="${SVC_ENDPOINTS[$service]}"

  info "STARTING ${service}" && lps

	kill_old "$service"
	start_node "$service" "${service_log}" "${TMP_LOG_FILE}"

	while [ true ]; do
  	endpoint_up "$service_url"; up=$?
		if [ "$up" -eq "0" ]; then
			success "SUCCESS\n"
			break
		fi
		if [ $(grep -ic "ERR!" "${TMP_LOG_FILE}") -ne "0" ]; then
			cat ${service_log}
      err "\n\n** FAILED TO START ${service}; LOG IS DISPLAYED ABOVE\n";
  	  kill_all_and_exit
    fi
	done
	[ -e "$TMP_LOG_FILE" ] && rm "$TMP_LOG_FILE"
}

run_services() {
  for service in "${!SVC_ENDPOINTS[@]}"; do
    run_svc "${service}"
  done
}

run_site() {
	log=$(get_svc_log ${SITE_DIR})
  cd "${PROJ_BASE_DIR}/${SITE_DIR}"
	if [ "${USE_DEV_CONFIG}" = "true" ]; then
		warn "STARTING ${SITE_DIR} WITH DEV CONFIGURATION\n"
    ng serve -c=dev | tee -a $log &
	else
		info "STARTING ${SITE_DIR}\n"
    ng serve | tee -a $log &
	fi
}

run_all() {
  run_services || exit "$?"
  run_site || exit "$?"
}

ensure_deps() {
	mongod -version &>/dev/null || { err "MongoDB is not installed. Install then re-run\n"; exit 1; }
	redis-cli -v &>/dev/null || { err "Redis is not installed. Install then re-run\n"; exit 1; }
	ng version &>/dev/null || { err "Angular is not installed. Install then re-run\n"; exit 1; }
	node -v &>/dev/null || { err "Node is not installed. Install then re-run\n"; exit 1; }
	nv=$(node -v) && nv=$(cut -f1 -d\. <<< ${nv#?})
	[ "$nv" -lt "$NODE_MAJOR_VERSION" ] && { err "Required major version of node is ${NODE_MAJOR_VERSION}, your version is ${nv}\n"; exit 1; }
}

ensure_backend() {
	for i in ${BACKEND_SVCS}; do
	  systemctl status --no-pager $i &>/dev/null || { err "$i is not running, try running it with 'systemctl start $i'\n"; exit 1; }
	done
}

ensure_dirs() {
	if [ ! -d "$PROJ_BASE_DIR" ]; then
		err "project base directory ${PROJ_BASE_DIR}"\
		"does not exist. Please change it in the CONSTANTS section of this script."\
		"This is the directory that contains all the proj projects\n"
		exit 1
	fi
  for service in "${!SVC_ENDPOINTS[@]}"; do
		service_path="${PROJ_BASE_DIR}/${service}"
	  if [ ! -d "${service_path}" ]; then
	  	err "Path ${service_path} for service ${service} does not exist."\
	  	"All the services need to be under ${PROJ_BASE_DIR}."\
			"Please provide the right directory name in the SVC_ENDPOINTS variable in the CONSTANTS section of this script.\n"
	  	exit 1
	  fi
	done
	if [ ! -d "${PROJ_BASE_DIR}/${SITE_DIR}" ]; then
		err "Site directory ${PROJ_BASE_DIR}/${SITE_DIR} does not exist."\
		"Please change it in the CONSTANTS section of this script.\n"
		exit 1
	fi
}

print_status() {
	svc_process_running "${1}" && success "RUNNING\n" || err "DOWN\n"
}

print_process_statuses() {
	i=1
	info "SERVICES:\n"
  for service in "${!SVC_ENDPOINTS[@]}"; do
    service_url="${SVC_ENDPOINTS[$service]}"
		echo -n "${i} - ${service}: "
    print_status "${service_url}"
		i=$((i+1))
	done
	info "\nSITE:\n"
  echo -ne "$i - ${SITE_DIR}: " && print_status "${SITE_URL}" echo
}

await_site() {
  while [ "$(endpoint_up ${SITE_URL}; echo $?)" -ne "0" ]; do
  	:
  done
}

lps() {
	echo -n "..."
}

show_log() {
	target=$(get_svc_name_by_num $1)
	info "\n============ " && echo -n "${target} LOG START" && info " ============\n"
	cat $(get_svc_log $target)
	info "============ " && echo -n "${target} LOG END" && info " ============\n\n"
}

follow() {
	follow_scr="$LOG_DIR/follow"
  echo 'gnome-terminal --tab -e '"'"'bash -c "printf \"\e]2;'"'"'"$1"'"'"'\a\"; tail -f "'"'"'"$2"' > "$follow_scr"
  chmod 500 "$follow_scr"
	"$follow_scr" "$1 log" "$2" &>/dev/null
	rm -f "$follow_scr"
}

follow_log() {
	svc=$(get_svc_name_by_num $1)
  svc_log=$(get_svc_log_by_num $1)
	info "FOLLOWING $svc LOG IN NEW TAB"
	follow "$svc" "$svc_log"
}

follow_all() {
  for name in "${!SVC_ENDPOINTS[@]}"; do
		svc_log="$(get_svc_log $name)"
	  follow "$name" "$svc_log"
	done
	follow "${SITE_DIR}" "$(get_svc_log ${SITE_DIR})"
}

parse_num() {
  echo -n "$REPLY" | sed 's/[a-z]//g' | sed 's/ //g'
}

print_menu_row() {
	info " |" && printf "%-${2}s" "${1}" && info "|\n"
}

print_menu_row_std() {
	print_menu_row "${1}" "${MENU_WIDTH}"
}

print_menu_header() {
	info "  ____________________" && echo -n "OPTIONS" && info " ______________________ \n"
}

print_menu_footer() {
	info " *__________________________________________________*\n"
}

print_options() {
	width="50"
  print_menu_header
  print_short_menu_opts
  print_menu_footer
}

print_short_menu_opts() {
	print_menu_row_std "ls: show status of services"
	print_menu_row_std "r: restart all services & site"
  print_menu_row_std "r {N}: start/restart service number {N}"
	print_menu_row_std "f {N|*}: follow log for service {N} or all {*}"
  print_menu_row_std "k {N}: kill service number {N}"
	print_menu_row_std "log {N}: show log for service {N}"
	print_menu_row_std "o: show all options"
}

print_long_menu_opts() {
  print_menu_header
  print_short_menu_opts
	print_menu_row_std "q: kill all services & site, then quit"
  print_menu_row_std "clear|cls: clear screen & print options"
  print_menu_row_std "less {N}: show log for service {N} using less"
  print_menu_row_std "vim {N}: show log for service {N} using vim"
  print_menu_row_std "code {N}: show log for service {N} using VS code"
  print_menu_row_std "gedit {N}: show log for service {N} using gedit"
  print_menu_row_std "cat {N}: show log for service {N} using cat"
  print_menu_footer
}

###### MAIN

trap kill_all_and_exit SIGINT SIGTERM SIGHUP

case "$1" in
	"--help")
		usage 
  	exit 0
    ;;
	"-d")
		warn "Using dev configuration for ${SITE_DIR}\n"
		USE_DEV_CONFIG=true
		;;
esac

ensure_dirs

ensure_deps

ensure_backend

rm "$TMP_LOG_FILE" &>/dev/null

run_all || exit "$?"

# wait for site to go up before displaying the options
await_site

print_process_statuses

while [ true ]; do
  echo 
	print_options
  read -p"${PROMPT_STR}" 
  case "${REPLY}" in
  	log*[0-9])
			show_log $(parse_num ${REPLY})
  		;;
		r*[0-9])
			restart_svc $(parse_num ${REPLY})
			;;
		k*[0-9])
      kill_svc_by_num $(parse_num ${REPLY})
			;;
  	"ls"|"l"|"")
			print_process_statuses
  		;;
		r*)
			restart_all && await_site
			;;
		q)
			echo "Exiting" && lps
      kill_all_and_exit
			;;
		o)
     print_long_menu_opts 
			;;
		"clear"|"cls")
			clear
			;;
  	less*[0-9])
			less $(get_svc_log_by_num $(parse_num ${REPLY}))
  		;;
  	vim*[0-9])
			vim $(get_svc_log_by_num $(parse_num ${REPLY}))
  		;;
  	code*[0-9])
			code $(get_svc_log_by_num $(parse_num ${REPLY}))
  		;;
  	gedit*[0-9])
			gedit $(get_svc_log_by_num $(parse_num ${REPLY}))
  		;;
  	cat*[0-9])
			show_log $(parse_num ${REPLY})
  		;;
  	f*[0-9])
			follow_log "$(parse_num ${REPLY})" 
  		;;
		f*\*)
			follow_all
			;;
		*) 
			echo "Let's try that again"
			;;
  esac
done

